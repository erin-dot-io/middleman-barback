/////////////////////////////////////////////////////////////////////
//                                                                 //
//  INITIALIZE  ················································   //
//                                                                 //
//  put all non-directly compiled, globally required CSS here      //
//  (variables, mixins, librabry includes like bourbon/neat, etc)  //
//                                                                 //
//  add "@import 'initialize';" to the top of every scss partial   //
//                                                                 //
/////////////////////////////////////////////////////////////////////

@import "bourbon";
@import "neat";


//// VARIABLES ////

// colors

// typography


//// MIXINS ////

// media query brakpoints
@mixin respond-to($screen) {
  @if $screen == 'desktop-wide'             {@include media(min-width 1370px, 12) {@content;}}
  @else if $screen == 'desktop'             {@include media(min-width 1001px, 12) {@content;}}
  @else if $screen == 'desktop-narrow'      {@include media(max-width 1000px, 12) {@content;}}
  @else if $screen == 'desktop-narrow-only' {@include media(min-width 769px max-width 1000px, 12) {@content;}}
  @else if $screen == 'tablet'              {@include media(max-width 768px, 6) {@content;}}
  @else if $screen == 'tablet-only'         {@include media(min-width 640px max-width 768px, 6) {@content;}}
  @else if $screen == 'phone-wide'          {@include media(max-width 639px, 6) {@content;}}
  @else if $screen == 'phone-wide-only'     {@include media(min-width 480px max-width 639px, 6) {@content;}}
  @else if $screen == 'phone'               {@include media(max-width 479px, 4) {@content;}}
  @else if $screen == 'not-phone'           {@include media(min-width 480px) {@content;}}
  @else if $screen == 'netbook-11'          {@media (max-height: 600px) {@content;}}
  @else if $screen == 'netbook-13'          {@media (max-height: 790px) {@content;}}
  @else if $screen == 'ratio-small'         {@media all and (min-width: 1670px), (max-height: 639px) {@content;}}
  @else if $screen == 'retina' {
    @media (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx) {
      @content;
    }
  }
}

// css-arrow mixin
// use:
// @include css-arrow(right, center, 20px, 0, #ddd, #aaa, flag);
@mixin css-arrow($box-edge         : bottom,
                 $edge-side        : center,
                 $arrow-size       : 10px,
                 $edge-side-offset : 0,
                 $fill-color       : black,
                 $border-color     : none,
                 $border-style     : border) {

// initiate internal variables
  $box-edge-inverse: bottom;
  $edge-side-pos: $edge-side;
  $edge-side-pos-value: 0;

// establish inverse variables
  @if      $box-edge == top    { $box-edge-inverse: bottom; }
  @else if $box-edge == right  { $box-edge-inverse: left;   }
  @else if $box-edge == bottom { $box-edge-inverse: top;    }
  @else if $box-edge == left   { $box-edge-inverse: right;  }

// calculate remaining internal variables
  @if ($box-edge == 'top' or
       $box-edge == 'bottom') {
    @if $edge-side == center {
      $edge-side-pos: left;
      $edge-side-pos-value: 50%;
      $edge-side-offset: (-$arrow-size);
    }
  }
  @if ($box-edge == 'left' or
       $box-edge == 'right') {
    @if $edge-side == center {
      $edge-side-pos: top;
      $edge-side-pos-value: 50%;
      $edge-side-offset: (-$arrow-size);
    }
  }

  &:after, &:before {
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border: solid rgba(#fff, 0);
  }

  &:after  {
    border-color: rgba(#fff, 0);
    border-width: $arrow-size - 1;
    #{$box-edge}: (-$arrow-size) - $arrow-size + 2;
    border-#{$box-edge-inverse}-color: $fill-color;
    #{$edge-side-pos}: $edge-side-pos-value;
    margin-#{$edge-side-pos}: $edge-side-offset + 1;
  }

  @if $border-style == flag {
    @include border-radius(2px);
    &:before {
      border-color: rgba(#fff, 0);
      border-width: $arrow-size - 1;
      #{$box-edge}: (-$arrow-size) - $arrow-size + 2;
      border-#{$box-edge-inverse}-color: $border-color;
      #{$edge-side-pos}: $edge-side-pos-value;
      margin-#{$edge-side-pos}: $edge-side-offset + 2;
    }
  } @else {
    &:before {
      border-color: rgba(#fff, 0);
      border-width: $arrow-size;
      #{$box-edge}: (-$arrow-size) - $arrow-size;
      border-#{$box-edge-inverse}-color: $border-color;
      #{$edge-side-pos}: $edge-side-pos-value;
      margin-#{$edge-side-pos}: $edge-side-offset;
    }
  }
}

@mixin fill($width: 100%) {
  @include box-sizing(border-box);
  width: $width;
}